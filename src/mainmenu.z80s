MAINMENU:
                di

                xor a
                ld (NEXTDISPLAYSCREEN),a    ; frame interrupt shouldn't switch VMPR on us until we're doing animations

                ld a,SCREENPAGE0+96
                ld (DISPLAYSCREEN),a

 
                ld a,BORDERSCREENOFF
                out (BORDER),a
                LD   A,SCREENPAGESPECIAL
                out (HMPR),a

                or 96
                out (vmpr),a

                ld sp,HMEM_STACK_FRAME

                ld a,MUSIC.maaora.gzPAGE
                ld hl,MUSIC.maaora.gz
                call DECODEMUSIC
                call MUSIC_GOTO_CUSTOM

                ld a, LOGOPAGE
                ld hl, LOGOADDR

                call DECODEGZSCREEN    

                ld a,SCREENPAGE0
                call COPY_THIS_SCREEN_ONCE
                call DUPLICATESCREENDATA
                
                ld a,SCREENPAGE0
                out (hmpr),a
                or 96
                out (vmpr),a

				ld hl, MAINMENU_INTCALLBACK
				ld (FRAMEVECTOR),hl

				
				ld hl, MENU_TEXT_ROLLING
				ld (NEXT_MENU_TEXT),hl
				ld a,1
				ld (MENU_TEXT_DELAY),a


                jp MAINLOOP
     
                
MAINMENU_INTCALLBACK:                
				ld a,(last_calculated_frame)
				inc a
				ld (last_calculated_frame),a    ; signal that we want the screen frame to update + cycle
				
				ld h, KEYBOARD_TABLE/256
				ld a, (player_space + PLAYER.FIRE_KEYaddr)
				ld l,a
				ld a, (player_space + PLAYER.FIRE_KEYmask)
				and (hl)
				or a
				jr z, mainmenu_startgame
		
		
		
		
				ld bc, MENU_STAR_EFFECT_ID
				call ADD_SPRITE_TO_CURRENT_LIST ; bc=routine, de=location (uses HL)
				


				
MENU_TEXT_DELAY: equ $+1
				ld a,1
				or a
				jr z, done_menu_text_update_repeat
				
				dec a
				ld (MENU_TEXT_DELAY),a
				jp nz, done_menu_text_update				
				
				ld a,(count_completed_frames)
				add 3
				ld (menu_text_repeat_until),a
				
done_menu_text_update_repeat:

NEXT_MENU_TEXT: equ $+1		
				ld hl, MENU_TEXT_ROLLING

MENU_LINE_TOP: equ 100
				ld d,MENU_LINE_TOP

start_next_line:
				ld c,l
				ld b,h
				
				ld e,255
				

@strlen:
				inc e
				ld a,(hl)
				inc hl
				cp 32
				jr nc, @strlen


				ld a,32
				sub e
				add a
				add a
				ld e,a
				
				push hl
				call ADD_STRING_TO_CURRENT_LIST      ; call with BC = string (accessible in LMEM), and DE = 192/256 pixel location (uses HL)
				pop hl
				
				ld a,d
				add 8
				ld d,a
				
				dec hl
				ld a,(hl)
				inc hl
				
				cp 10
				jr z, start_next_line
				
				ld e,a


				ld a,(count_completed_frames)
menu_text_repeat_until: equ $+1
				cp 00
				
				jr nz, @
				ld (NEXT_MENU_TEXT),hl
				
				ld a, 93
				ld (MENU_TEXT_DELAY),a

				ld a,e
				cp 1
				
				jr nz, @
				
				ld hl,MENU_TEXT_ROLLING
				ld (NEXT_MENU_TEXT),hl
@:

		
				







done_menu_text_update:		
				
				ret

very_short_text:	db "b",0


mainmenu_startgame:
				ld hl, Start_Game
				ld (EXIT_MAIN_LOOP_VECTOR), hl
                
                ret
                
               
Start_Game:
				di
				call SILENCE
 
                ld a,BORDERSCREENOFF
                out (BORDER),a

                
                ld sp,HMEM_STACK_FRAME
				                
                xor a
                ld (NEXTDISPLAYSCREEN),a    ; frame interrupt shouldn't switch VMPR on us until we're doing animations

                ld a,SCREENPAGE0+96
setup_game_screens_loop:
                ld (DISPLAYSCREEN),a

				out (hmpr),a

				ld ix, drawpaneloutlines_rtn
				ld hl,32768 + 176*128
				exx


				ld b,16
				ld hl,panel_layout
drawpaneloutlines_loop:				
				ld e,(hl)
				inc l
				ld a,(hl)
				inc l
				
				exx
				ld d,a
				exx
				ld a,e
				exx
				ld e,a
				
				
assert (DRAWtiles.png_0_11PAGE == DRAWtiles.png_2_11PAGE)
				ld a,DRAWtiles.png_0_11PAGE | 32

				jp HMEM_SWITCH_LMEM_DRAW  ; SP is background remove stack, DE is routine in page A, HL is HMEM address to draw			
drawpaneloutlines_rtn:
				ld a,l
				sub 128-8
				ld l,a

				exx
				djnz drawpaneloutlines_loop


				ld bc,16
				ld hl, game_palette
				ld de,32768+24576
				ldir

				ld a,(DISPLAYSCREEN)
				add 2
				cp SCREENPAGE0+96+6
				jr c, setup_game_screens_loop

                LD   A,SCREENPAGESPECIAL
                out (HMPR),a
                

                ld a,MUSIC.hector.gzPAGE
                ld hl,MUSIC.hector.gz
                call DECODEMUSIC
                call MUSIC_GOTO_CUSTOM


				ld hl, level1
				jp begin_screen

ds align 32
panel_layout:
				dw DRAWtiles.png_0_11,DRAWtiles.png_2_11
				dw DRAWtiles.png_0_11,DRAWtiles.png_1_11,DRAWtiles.png_2_11
				dw DRAWtiles.png_0_11,DRAWtiles.png_1_11,DRAWtiles.png_1_11,DRAWtiles.png_1_11,DRAWtiles.png_1_11,DRAWtiles.png_2_11
				dw DRAWtiles.png_0_11,DRAWtiles.png_1_11,DRAWtiles.png_1_11,DRAWtiles.png_1_11,DRAWtiles.png_2_11




				   ;1234567890123456
MENU_TEXT_ROLLING:
				dm "FIRE to start"
				db 10
				dm "ESC for menu"
				db 0   
				db 0
				dm "             "
				db 10
				dm "            "
				db 0   
				dm "MNEMOTECH"
				db 0
				dm "in association"
				db 10
				dm "with"
				db 0
				dm " SILVER SWORD "
				db 10
				dm "    "
				db 0
				dm "  is proud  "
				db 10
				dm "to present"
				db 0
				dm "CYBERNAUT I."
				db 10
				dm "          "
				db 10
				dm "The Fighting"
				db 10
				dm "Machine"
				db 0
				db 0
				dm "            "
				db 10
				dm " "
				db 10
				dm "            "
				db 10
				dm "       "
				db 0
				dm "Build version"
				db 10
				MDAT "../_build/version"
				db 0
				dm "Programming by"
				db 10
				dm "Andrew Collier"
				db 10
				dm "           "
				db 0
				dm "  Graphics by  "
				db 10
				dm " SILVER SWORD "
				db 0
				dm "           "
				db 10
				dm "            "
				db 0
				dm "Special Thanks"
				db 10
				dm "Colin Piggot"
				db 0
				db 10
				dm "Josef Prokes"
				db 0
				db 10
				dm " Balor Price "
				db 0
				db 10
				dm " Simon Owen "
				db 0
				dm "              "
				db 10
				dm "          "
				db 1
				
