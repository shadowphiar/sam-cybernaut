				INCLUDE "global.z80s"




				ORG 32768
				DUMP SCREENPAGESPECIAL + 1, $ \ 16384

                AUTOEXEC

                DI
                LD A,BORDERSCREENOFF
                OUT (BORDER),A
   
                LD A, SCREENPAGE0 | 96
                OUT (vmpr),A

                LD A, IM2BYTE
                LD I,A
                IM 2


; initial setup, copy the screen code routines into their location in screen memory
; first for the 3 main screens

        		ld a, SCREENPAGE0 | 32
@copyloop:
                out (lmpr),a
        
                ld bc,SCREENFUNCTIONLEN
                ld hl,SCREENFUNCTIONORG-16384
                ld de,SCREENFUNCTIONORG-32768
                ldir

                ld hl,IM2BYTE*256 -32768
                ld de,IM2BYTE*256 +1 -32768
                ld bc,257
                ld (hl), IM2TARGETBYTE
                ldir

                add 2
                cp (1+SCREENPAGETOP) | 32
                jr c, @copyloop

                LD A,CODEPAGE + 32
				OUT  (LMPR),A

                JP   LMEM



				ORG SCREENFUNCTIONORG
				DUMP SCREENPAGESPECIAL + 1, SCREENFUNCTIONORG \ 16384

STARTOFSCREENFUNCTIONS:

                INC "screenfunctions.z80s"

ENDOFSCREENFUNCTIONS:
                
                INCLUDE "specialscreencpfns.z80s"

                assert $ < 65024
            


    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



                ORG  0
                DUMP CODEPAGE,0



FRAMEINT:
			; no need to call SWITCH_HMPR for hmpr changes at frameint time
            ; (unless things are taking so long they might be in screen area!)

                LD (FRAMESPSTORE),SP
                IN   A,(HMPR)
                LD (FRAMEHMPRSTORE),A

                LD SP,FRAMEINT_STACK_FRAME

                ; AF' is still AF of background task - if we get a 'nested' line interrupt it would be corrupted!!!
                EX AF,AF'
                PUSH AF

	
                PUSH HL
                PUSH DE
                PUSH BC
                EXX
                PUSH HL
                PUSH DE
                PUSH BC
                PUSH IY
                PUSH IX
                
                
NEXTDISPLAYSCREEN:  EQU $+1                  
                LD A,0
                OR A
                JR Z,DISPLAYSCREENOK
                LD (DISPLAYSCREEN),A
                XOR A
                LD (NEXTDISPLAYSCREEN),A
DISPLAYSCREENOK:               

DISPLAYSCREEN:  EQU $+1                
                LD A,SCREENPAGE0 + 96
                OUT (VMPR),A    ; this is the next screen which will be displayed
                				; that said, the pallete line status is in the current hmem
;                and 31
;                out (HMPR),a

                LD HL,57344 + 19
                
                LD (LINESETPOINTER),HL
                DEC L
                
                LD A,(HL)
                LD (LINESETPALETTE),A
                DEC L
                LD A,(HL)
                LD (LINESETINDEX),A
                DEC L
                LD A,(HL)
                OUT (line),A
                DEC L
                
                LD BC,CLUT + 256*16
                for 16, OUTD
                

                
FRAMECLOCK: EQU $+1
                LD A,00
                INC A
                LD (FRAMECLOCK),A

    ;; read all the keyboard inputs into a table
    ; (avoid any duplicate port reading, which may be confused with mouse interface)

                LD HL,KEYBOARD_TABLE
        
                LD B,0xfe
        
        
        
get_keyboard_loop:
               
                LD C,0xfe        
                IN A,(C)
                AND 0x1f
                LD E,A
        
                LD C,0xf9
                IN A,(C)
                AND 0xe0
                
                OR E
                LD (HL),A
                INC HL
                
                LD A,B
                INC A       ; sets Z if b was already 0xff
        
                LD A,B
                SCF
                RLA
                LD B,A
                
                JR NZ, get_keyboard_loop

                LD A,96
                OUT (clut),A

                LD   A,MUSICPAGE
                OUT  (HMPR),A

sfx_new_fxaddr: EQU $+1
                LD HL,0000

                LD A,H
                OR L
                JR Z, no_new_sfx

                LD C,(HL) ; sfx_length
                INC HL
                INC HL
                INC HL
				; hl is sfx_addr


				LD A,(sfx1_length)
				OR A
				JR Z, sfx_store1

				LD B,A

				LD A,(sfx2_length)
				OR A
				JR Z, sfx_store2
				
				; three potentially active sound effects
				; newest always gets priority; play over whichever has least time remaining to run
				
				CP B
				JR C, sfx_store2
				

sfx_store1:

sfx_new_fxstereo: EQU $+1
                LD A,00
                AND 0xf0
                LD (sfx1_stereo),A
                LD A,C
                LD (sfx1_length),A
                LD (sfx1_address),HL

				JR sfx_stored

sfx_store2:

                LD A,(sfx_new_fxstereo)
                AND 0xf0
                LD (sfx2_stereo),A
                LD A,C
                LD (sfx2_length),A
                LD (sfx2_address),HL

sfx_stored:

                LD HL,0
                LD (sfx_new_fxaddr),HL
                
                
no_new_sfx:


USING_SFX_TABLE: EQU $+1                
                LD D,sfxstereo_table/256



sfx1_length: EQU $+1
                LD A,00
                OR A
                JR Z, sfx1_done

                DEC A
                LD (sfx1_length),A



sfx1_address: EQU $+1
                LD HL,0000
                
                LD A,(HL)   ; volume
                AND 0x0f
sfx1_stereo: EQU $+1
                OR 0x00                
                LD E,A
                LD A,(DE)
                LD (SOUNDTABLE + 0),A

                INC HL
                LD E,(HL)  ; flags
                
                LD A,E
                AND 0x7
                LD B,A
                LD A,(SOUNDTABLE + 12)
                AND 0xf8
                OR B
                LD (SOUNDTABLE + 12),A  ; octave

                LD A,(SOUNDTABLE + 15)  ; freq enable
                AND 0xfe
                BIT 5,E
                JR Z, @+no
                OR 0x1
@no:            LD (SOUNDTABLE + 15),A  ; freq enable

                LD A,(SOUNDTABLE + 16)  ; freq enable
                AND 0xfe
                BIT 4,E
                JR Z, @+no
                OR 0x1
@no:            LD (SOUNDTABLE + 16),A  ; noise enable

                LD A,E
                RLCA
                RLCA
                AND 0x03
                LD E,A
                
                LD A,(SOUNDTABLE + 17)
                AND 0xfc
                OR E
                LD (SOUNDTABLE + 17),A      ; noise colour
                
                INC HL
                LD A,(HL)   ; tone
                LD (SOUNDTABLE + 6),A

                INC HL
                LD (sfx1_address),HL


sfx1_done:



sfx2_length: EQU $+1
                LD A,00
                OR A
                JR Z, sfx2_done

                DEC A
                LD (sfx2_length),A

sfx2_address: EQU $+1
                LD HL,0000
                
                LD A,(HL)   ; volume
                AND 0x0f
sfx2_stereo: EQU $+1
                OR 0x00                
                LD E,A

                LD A,(DE)
                LD (SOUNDTABLE + 3),A

                INC HL
                LD E,(HL)  ; flags
                
                LD A,E
                ADD A
                ADD A
                ADD A
                ADD A
                AND 0x70
                LD B,A
                LD A,(SOUNDTABLE + 13)
                AND 0x8f
                OR B
                LD (SOUNDTABLE + 13),A  ; octave

                LD A,(SOUNDTABLE + 15)  ; freq enable
                AND 0xf7
                BIT 5,E
                JR Z, @+no
                OR 0x8
@no:            LD (SOUNDTABLE + 15),A  ; freq enable

                LD A,(SOUNDTABLE + 16)  ; freq enable
                AND 0xf7
                BIT 4,E
                JR Z, @+no
                OR 0x8
@no:            LD (SOUNDTABLE + 16),A  ; noise enable

                LD A,E
                RRA
                RRA
                AND 0x30
                LD E,A
                
                LD A,(SOUNDTABLE + 17)
                AND 0xcf
                OR E
                LD (SOUNDTABLE + 17),A      ; noise colour
                
                INC HL
                LD A,(HL)   ; tone
                LD (SOUNDTABLE + 9),A

                INC HL
                LD (sfx2_address),HL

			; if sfx1 is now empty, move sfx2 into it (for better use of sound chip channels overloaded with music)

				LD A,(sfx1_length)
				OR A
				JR NZ, sfx2_done

				LD A,(sfx2_length)
				LD (sfx1_length),A
				LD A,(sfx2_stereo)
				LD (sfx1_stereo),A
				LD HL,(sfx2_address)
				LD (sfx1_address),HL
				XOR A
				LD (sfx2_length),A

sfx2_done:

music_new_pattern_set: EQU $+1
                LD HL,0000
                LD A,H
                OR L
                JR Z, no_new_pattern_set

                CALL RPLAYERDASH

                XOR A
                LD (music_new_pattern_set),A
                LD (music_new_pattern_set+1),A
                JR new_pattern_set

no_new_pattern_set:

is_music_enabled: EQU $+1
                ld a,00
                or a
                CALL nz, PLAYROUTINE
new_pattern_set:

is_music_softened: EQU $+1
				LD A,0
				OR A
				JR Z, musicnotsoftened


                LD D,musicsoft_table/256
                
                LD HL,SOUNDTABLE
   
   musicchannel: EQU FOR 6
                LD E,(HL)
                LD A,(DE)
                LD (HL),A
                INC HL
    next musicchannel            
                
                
musicnotsoftened:

                XOR A
                OUT (clut),A


                ; FRAMEVECTOR should be the last thing we do.
                ; This means we can arrange for it to be safe for LINE interrupts to occur
                ; (all screen pointers updated - HMPR value is NOT allowed to change except going via SWITCH_HMPR)



FRAMEHMPRSTORE: EQU $+1
                LD A,00
                OUT  (HMPR),A


                ; and just to emphasize that point, we'll enable interrupts here
                EI

				LD HL,(FRAMEVECTOR)
				LD A,H
				OR L
FRAMEVECTOR: EQU $+1
				CALL NZ, 0000
				; do things on frame interrupts. This depends on whether we are in game loop, menu waiting, or whatever


                POP IX
                POP IY
                POP  BC
                POP  DE
                POP  HL
                EXX
                POP  BC
                POP  DE
                POP  HL

                POP AF
                EX AF,AF'   ; 
 

FRAMESPSTORE:   EQU  $+1
                LD   SP,0000

                RET









MUSIC_GOTO_PATTERN:     ; pattern in A register  (can be called at any time [maintains hl])
                LD C,A

				LD A,(is_music_enabled)
				OR A
				RET Z

                XOR A
                RL C
                RLA
                ADD 128
                LD B,A
                LD (music_new_pattern_set), BC
                RET

MUSIC_GOTO_CUSTOM:
				LD A,(is_music_enabled)
				OR A
				RET Z
				LD A,128+ (load_music_page_offset/256)
				LD (music_new_pattern_set+1),A
				XOR A
				assert (load_music_page_offset\256) == 0
				LD (music_new_pattern_set),A
				RET



SFX_START:              ; stereo position in A, SFX address in hl
			
				LD (sfx_new_fxstereo),A

fx_enabled: EQU $+1
				LD A,00
				OR A
				RET Z

                LD (sfx_new_fxaddr),HL
          
                RET


SILENCE:        ; (can be called at any time [maintains hl])

                LD BC,511
                LD D,5
                XOR A

@loop:          
                OUT  (C),D
                DEC B
                OUT  (C),A
                INC B
                DEC D
                JR NZ,@loop
                OUT  (C),D
                DEC B
                OUT  (C),A

                LD (sfx1_length),A
                LD (sfx2_length),A

                CALL MUSIC_GOTO_PATTERN
                RET

LMEM:
                LD   SP,SPRITE_STACK_FRAME_0

                call SILENCE

                CALL LOAD_CONFIG
                LD (status_message),HL

                CALL INITCONFIG

				JP MAINMENU


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; MAIN LOOP
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

MAINLOOP:
    ; assume all user input will be handled by FRAMEINT that has been set up
    ; background loop obeys incoming graphics requests and does nothing else

				ld a,SCREENPAGE0
				out (hmpr),a
				ld (WORKSCREEN),a

				ld hl,0
				ld (65534),hl
                ld sp, HMEM_STACK_FRAME
                ei

                ld a,BORDERSCREENON
                out (BORDER),a

MAINLOOP_LOOP:

last_calculated_frame: equ $+1
				ld a,00
				ld (frame_being_drawn),a
last_drawn_frame: equ $+1
				sub 00

                ld c,a
                
show_timing_info: equ $+1
                ld a,01
                or a
                jr z, @+no_timing_info
                
                ld a,c
                
				rlca
				rlca
				rlca
				rlca
				and 0xf0

				out (CLUT),a

@no_timing_info:
                ld a,c
                or a

				jr z,MAINLOOP_LOOP




DRAWBUSYLOOP:   

				ld a,(NEXTDISPLAYSCREEN)
                or a
                jr z,noDRAWBUSYLOOP


		if DEBUG
                ld a,6*16
                out (CLUT),a
                ld a,5*16
                out (CLUT),a
		endif

				jr DRAWBUSYLOOP

NODRAWBUSYLOOP:
				
               
WORKSCREEN:     EQU $+1
                LD A,SCREENPAGE1
                or 96
                ld (NEXTDISPLAYSCREEN),A
                and 31
                inc a
                inc a
                cp SCREENPAGETOP+1
                jr c,workscreenok
                ld a,SCREENPAGE0
workscreenok:   ld (WORKSCREEN),a

                ld sp, LMEM_SWITCH_STACK_FRAME
				call SWITCH_HMPR

frame_being_drawn: equ $+1
				ld a,00
  				ld (last_drawn_frame),a



                ld hl,(65534)
                ld a,h
                or l
                jr z,noscreenrestore
 
                ld sp,hl
                RET   ; goes through background restore routines and gets back here
noscreenrestore: 




				; set up the stack for background removal routines 
				ld sp, HMEM_STACK_FRAME

				ld de, noscreenrestore
				push de
                ld a,CODEPAGE | 32
                push af
                ld de, HMEM_SWITCH_LMEM_REMOVE
                push de
                ; marshall through hmem, any previous remove routines are in other page





no_drawvector_call:

				ld IX, draw_loop_return_address

				ld h, 96
				ld l, 128
				ld de, ship.png_0_0ID			; get HL, DE as if from a list of sprites provided by last FRAMEINT

				ld a,(frame_being_drawn)
				and 127
				add 64	; temp hack
				ld l,a
				
				ld a,e
				and 31
				or 32
				
				rr d
				rr e ; aligns to 16 bytes, and specifies the address as in a 32k page
				
				scf
				rr h
				rr l

				jp HMEM_SWITCH_LMEM_DRAW ; SP is background remove stack, DE is routine in page A, HL is HMEM address to draw



draw_loop_return_address:

				ld (65534), SP




EXIT_MAIN_LOOP_VECTOR: equ $+1
                ld hl,0000
                ld a,l
                or h
                jp z, MAINLOOP_LOOP

				di
				ld de,0
				ld (FRAMEVECTOR),de
				ld (EXIT_MAIN_LOOP_VECTOR),de

                call SILENCE

                JP (HL)



                INCLUDE "physics.z80s"
                INCLUDE "config.z80s"
                INCLUDE "mainmenu.z80s"

game_palette:   db     0,7,15,120,127,10,34,44,106,5,13,88,75,12,4,25
 
level1:		
    DB 80,111,71,68,67,36,37,71,68,67,86,79,49,80,49,80,49,88,0,75,76,40,41,0,0,75,65,87,85,85,111,78,78,86,0,75,76,34,35,0,0,75,76,76,104,103,110,80,49,86,0,75,76,0,0,0,0,75,77,76,0,0,108,49,80,86,0,75,76,0,0,0,0,75,77,76,0,0,108,80,49,86,0,75,76,0,0,0,0,75,71,67,0,0,108,49,80,86,0,75,76,0,0,0,0,75,76,76,0,0,108,79,78,86,0,75,66,0,0,66,0,75,77,76,0,0,108,49,80,108,101,102,69,8,9,69,101,75,77,76,0,0,108,80,49,111,109,107,69,42,43,69,109,65,77,76,111,109,111,49,80,79,80,49,69,38,39,69,80,88,76,76,110,80,78,80
    DB 49,49,80,49,80,49,49,49,78,49,80,49,80,49,80,49,49,65,87,85,85,85,107,111,49,80,49,111,109,111,49,80,78,26,0,75,77,74,99,100,100,99,100,99,100,110,79,49,49,27,0,75,77,74,0,0,44,44,0,0,0,108,49,80,49,27,0,75,77,74,0,0,0,0,0,0,0,65,28,29,107,65,0,75,77,74,0,0,0,0,0,0,0,75,77,74,66,0,0,75,77,74,0,0,111,109,65,33,0,75,77,74,69,0,0,75,77,74,0,0,110,49,71,68,67,75,77,74,70,0,0,75,77,74,0,0,108,80,111,109,107,107,107,107,107,65,0,75,77,74,0,0,108,49,79,49,80,49,80,49,78,26,0,75,77,74,0,0,108,80,49,80,49,79,49,80
    DB 49,80,49,80,79,80,49,80,49,86,75,76,108,80,49,80,80,49,111,96,90,90,90,90,91,65,75,76,65,87,111,49,49,80,88,0,44,75,74,74,0,0,75,76,0,0,110,80,78,49,86,0,0,75,77,74,0,0,75,76,0,0,108,78,85,85,65,0,0,75,77,74,0,0,75,76,0,0,108,80,75,74,74,0,0,75,77,74,0,0,75,76,0,0,108,49,75,77,74,0,0,75,77,74,0,0,75,76,0,0,108,79,75,77,74,50,66,75,77,74,0,0,75,66,101,102,86,49,107,107,107,107,111,75,77,74,17,17,75,111,87,85,111,80,80,49,80,49,92,97,98,97,98,97,98,92,80,78,80,49,78,80,49,80,93,49,80,49,80,49,80,93,49,80,49,80
    DB 80,92,0,75,77,74,0,0,86,49,106,79,106,49,80,49,79,93,0,75,77,74,0,0,65,87,106,87,106,87,85,85,49,93,0,75,77,74,0,0,44,0,69,0,69,0,0,0,80,93,0,75,77,74,0,0,0,0,69,1,69,0,0,0,49,94,17,75,77,74,0,0,0,0,70,0,70,0,0,0,80,111,65,75,77,74,0,0,0,0,0,0,0,0,0,0,78,80,88,75,77,74,0,0,0,0,66,2,66,0,0,0,80,49,86,75,77,74,0,0,0,0,69,0,69,101,102,101,49,80,111,87,111,74,17,17,0,0,69,87,69,109,107,107,80,49,80,79,110,97,98,97,98,97,106,97,106,49,80,49,29,29,29,29,108,80,78,80,80,80,106,80,106,29,29,29
    DB 80,49,78,49,80,49,80,49,80,49,80,49,108,49,49,49,111,87,85,85,85,85,85,85,107,111,49,79,108,80,49,80,104,103,44,44,44,75,76,74,103,110,80,49,108,49,79,49,0,0,0,0,0,75,77,74,0,86,49,80,108,99,100,99,0,0,0,0,0,75,77,74,0,86,78,49,86,75,75,75,0,0,0,0,0,75,77,74,0,65,87,85,65,75,77,77,0,0,0,0,0,75,77,74,0,75,75,75,75,75,77,48,0,0,0,50,51,75,77,74,0,66,77,77,66,77,77,66,107,107,65,52,53,75,77,74,58,111,109,107,85,107,107,85,49,80,111,109,107,107,107,107,107,111,49,80,49,80,79,80,78,49,80,49,80,49,79,49,80,49,78,49,80,49,80,49
    DB 49,80,49,80,49,80,79,80,49,111,87,85,111,80,49,80,80,111,87,85,85,85,85,107,107,65,75,76,65,87,111,49,49,88,0,0,75,76,74,103,104,0,75,77,74,0,110,80,85,65,0,0,75,77,74,0,0,0,75,77,74,0,65,87,0,0,0,0,75,77,74,0,0,0,75,77,74,0,0,0,0,0,0,0,75,77,74,0,0,0,75,77,74,0,0,0,0,0,0,0,75,77,74,0,0,0,75,77,74,0,0,0,0,0,0,0,75,77,74,17,17,0,75,77,74,0,111,109,107,111,56,57,75,77,74,42,43,0,75,77,74,58,110,80,80,111,109,107,107,107,107,38,39,65,75,77,111,109,111,49,49,80,78,80,49,80,79,36,37,111,87,85,111,80,49,79
    DB 80,27,71,68,67,71,68,67,71,68,67,21,108,49,80,49,78,27,103,104,75,76,74,0,75,76,74,25,108,80,49,78,80,27,0,0,75,77,74,0,75,77,74,0,108,49,80,49,49,27,0,0,75,77,74,0,75,77,74,0,108,80,49,80,80,27,0,0,75,77,74,0,75,77,74,0,65,87,85,85,49,27,0,0,75,77,74,0,75,77,74,0,44,75,76,74,80,27,0,0,75,77,74,0,75,77,74,0,0,75,77,74,49,27,33,0,75,77,74,0,75,77,74,0,0,75,111,109,80,111,65,66,75,77,74,66,75,77,74,0,0,75,110,79,79,80,26,69,75,77,74,106,97,98,97,98,97,98,108,49,80,49,27,69,75,77,74,106,49,79,49,80,49,80,108,80
	for 4176, DB 0
;    DB 80,92,0,75,77,74,0,0,86,49,106,79,106,49,80,49,79,93,0,75,77,74,0,0,65,87,106,87,106,87,85,85,49,93,0,75,77,74,0,0,44,0,69,0,69,0,0,0,80,93,0,75,77,74,0,0,0,0,69,1,69,0,0,0,49,94,17,75,77,74,0,0,0,0,70,0,70,0,0,0,80,111,65,75,77,74,0,0,0,0,0,0,0,0,0,0,78,80,88,75,77,74,0,0,0,0,66,2,66,0,0,0,80,49,86,75,77,74,0,0,0,0,69,0,69,101,102,101,49,80,111,87,111,74,17,17,0,0,69,87,69,109,107,107,80,49,80,79,110,97,98,97,98,97,106,97,106,49,80,49,29,29,29,29,108,80,78,80,80,80,106,80,106,29,29,29
print $, "What on earth? This seems to cause the startup to crash if I put data here instead of zeros, but I can't find any reason. It doesn't even seem to matter exactly where."
;    	INCLUDE "../_build/level1.z80s"


KEYBOARD_TABLE:     ds 9
STATUS_MESSAGE:     dw 0

            DS 32000-$

            
ds 256
SPRITE_STACK_FRAME_0: equ $
ds 256
SPRITE_STACK_FRAME_1: equ $
            
ds 6
LMEM_SWITCH_STACK_FRAME: equ $
ds 250
FRAMEINT_STACK_FRAME: equ $            
            
HMEM_STACK_FRAME: equ 65534
        
            assert $ <= 32768


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

                ORG 32768
                DUMP MUSICPAGE,0

temp_space_for_loading_music: 

load_music_page_offset: EQU $-32768
max_size_of_loaded_music: EQU 20480	

end_of_msuic: EQU temp_space_for_loading_music + max_size_of_loaded_music
                
                DEFS end_of_msuic-$; space for other music at 40960



; disc calls which won't move around even if the size of code changes. Allow hackers to implement atom/trinity layer
DISKOPS_PAGE: EQU MUSICPAGE
 
LOAD_CONFIG:	
				JP discop_load_config		;	HL 
SAVE_CONFIG:	JP discop_save_config		;
 
                
                INC "../ext/ptplayer.z80s"   ; call RESETPLAYER and PLAYROUTINE
				INC "discops.z80s"

                assert $ < (65536 - 4*256)

               DEFS align 256
sfxmono_table:    
                for 16, DEFB 0x00,0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x88,0x99,0xaa,0xbb,0xcc,0xdd,0xee,0xff
sfxstereo_table:    
                MDAT "../_build/stereotable.o"

				assert (0 == ($\256))
musicsoft_table:
musicsoft_left: EQU FOR 16
	@L: EQU (musicsoft_left+1)/2
    musicsoft_right: EQU FOR 16
		@R: EQU (musicsoft_right+1)/2
            DEFB 16*@L + @R
    NEXT musicsoft_right
next musicsoft_left



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


                DUMP DATASTARTPAGE,0
                MDAT "../_build/data.obj"
